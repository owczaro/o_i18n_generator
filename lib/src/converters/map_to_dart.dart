import 'dart:convert';
import 'dart:io';
import 'package:meta/meta.dart';

import 'package:dart_style/dart_style.dart';
import 'package:path/path.dart' as path;

import '../../o_i18n_generator.dart';
import '../models/command_config.dart';
import '../utls/file_utils.dart';
import 'language_tag_to_var.dart';

/// A converter, which transforms a map of translations
/// to `.g.dart` file. It helps to statically apply translations.
class MapToDart {
  /// A language tag to process.
  final String languageTag;

  /// A map containing translations.
  final Map<String, dynamic> translations;

  /// Creates an instance of [MapToDart]
  MapToDart({
    @required this.languageTag,
    @required this.translations,
  }) : assert(languageTagsAndNames.keys.contains(languageTag)) {
    var content =
        '///////////////////////////////////////////////////////////\n'
        '///////////// AUTOGENERATED FILE. DO NOT MODIFY ///////////\n'
        '///////////////////////////////////////////////////////////\n'
        '// ignore_for_file: prefer_single_quotes\n\n'
        'const Map<String, dynamic> $_varName = ${jsonEncode(translations)};\n';

    var formatter = DartFormatter();
    try {
      content = formatter.format(content);
      _outputFile.writeAsStringSync(content);
    } on FormatterException catch (e) {
      print(e);
    }
  }

  /// Creates a name of variable used as translation map name.
  String get _varName => LanguageTagToVar.convert(languageTag);

  File get _outputFile => openFile(
      path.normalize('${CommandConfig.targetDir}/$languageTag.g.dart'));
}
